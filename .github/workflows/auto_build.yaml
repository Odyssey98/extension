name: Create Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - v*
      - auto_build*
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    tags:
      - v*
      - auto_build*
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (test/release)'
        required: true
        default: 'test'

jobs:
  test-build:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'test'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          cache: yarn

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-deps-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: yarn install --ignore-scripts

      - name: Show environment info
        run: |
          node --version
          yarn --version
          df -h

      - name: Build Chrome (Test Build)
        run: yarn build:chrome:mv3

      - name: Get Version Name for Test Build
        id: get-test-version
        run: |
          # Get version from package.json and add timestamp
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +'%Y%m%d%H%M')
          echo "version=v$VERSION-test-$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Using test version: v$VERSION-test-$TIMESTAMP"

      - name: Prepare Test Release Files
        run: |
          mkdir -p dist/release
          # Find all zip files and copy to release directory with version number
          find dist -name "*.zip" -exec bash -c 'FILENAME=$(basename {}); EXT="${FILENAME##*.}"; NAME="${FILENAME%.*}"; cp {} dist/release/$NAME-${{ steps.get-test-version.outputs.version }}.$EXT' \;
          # If no zip files found, create a default one
          if [ ! -f "$(find dist/release -name "*.zip" | head -1)" ]; then
            find dist -name "*.zip" -exec cp {} dist/release/unisat-chrome-mv3-${{ steps.get-test-version.outputs.version }}.zip \;
          fi
          echo "Files prepared for test release:"
          ls -la dist/release/

      - name: Create Test Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get-test-version.outputs.version }}
          name: Test Build ${{ steps.get-test-version.outputs.version }}
          files: dist/release/*.zip
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-build:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.build_type == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          cache: yarn

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-deps-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: yarn install --ignore-scripts

      - name: Show environment info
        run: |
          node --version
          yarn --version
          df -h

      - name: Build Chrome (Release Build)
        run: yarn build:chrome:mv3

      - name: List Build Output
        run: |
          echo "===== Checking dist directory contents ====="
          ls -la dist/
          find dist -name "*.zip" -o -name "*.xpi"

      - name: Get Version Name
        id: get-version
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: v$VERSION"

      - name: Prepare Release Files
        run: |
          mkdir -p dist/release
          # Find all zip files and copy to release directory with version number
          find dist -name "*.zip" -exec bash -c 'FILENAME=$(basename {}); EXT="${FILENAME##*.}"; NAME="${FILENAME%.*}"; cp {} dist/release/$NAME-${{ steps.get-version.outputs.version }}.$EXT' \;
          # If no zip files found, create a default one
          if [ ! -f "$(find dist/release -name "*.zip" | head -1)" ]; then
            find dist -name "*.zip" -exec cp {} dist/release/unisat-chrome-mv3-${{ steps.get-version.outputs.version }}.zip \;
          fi
          echo "Files prepared for release:"
          ls -la dist/release/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: dist/release/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
